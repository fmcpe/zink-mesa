diff --git a/.github/workflows/android.yml b/.github/workflows/android.yml
new file mode 100644
index 0000000..5ba94c6
--- /dev/null
+++ b/.github/workflows/android.yml
@@ -0,0 +1,70 @@
+
+name: Build Android
+
+on:
+  [push, pull_request]
+
+# A workflow run is made up of one or more jobs that can run sequentially or in parallel
+jobs:
+  build:
+    strategy:
+      matrix:
+        arch: [ "arm32", "aarch64", "x86_64" ]
+      fail-fast: false
+
+    name: "Build for ${{matrix.arch}}"
+
+    runs-on: ubuntu-20.04
+
+    steps:
+      - uses: actions/checkout@v2
+
+      - name: Build
+        run: |
+          ln -s vulkan_android.pc vulkan.pc
+          sudo apt update
+          sudo apt install -y meson libxrandr-dev libxxf86vm-dev libxcb-*-dev libx11-xcb-dev libxfixes-dev libdrm-dev libx11-dev
+          cp -R /usr/include/X11 include/
+          cp -R /usr/include/xcb include/
+          cp -R /usr/include/GL/* include/GL/
+          pip3 install mako
+          #
+          if [ "${{matrix.arch}}" == "arm32" ]; then
+            export ANDROID_TARGET=armv7a-linux-androideabi
+          elif [ "${{matrix.arch}}" == "aarch64" ]; then
+            export ANDROID_TARGET=aarch64-linux-android
+          elif [ "${{matrix.arch}}" == "x86_64" ]; then
+            export ANDROID_TARGET=x86_64-linux-android
+          fi
+          bash android-cross-file-gen.sh
+          # -Dglx=gallium-xlib \
+          meson "build-android-${{matrix.arch}}" \
+            --prefix=/tmp/mesa \
+            --cross-file "/tmp/generated-cross-file" \
+            --buildtype debug \
+            -Dplatforms=android \
+            -Dplatform-sdk-version=26 \
+            -Dandroid-stub=true \
+            -Dllvm=disabled \
+            -Dxlib-lease=disabled \
+            -Degl=disabled \
+            -Dgbm=disabled \
+            -Dglx=dri \
+            -Dglx-direct=true \
+            -Dopengl=true \
+            -Dosmesa=true \
+            -Dvulkan-drivers= \
+            -Dgallium-drivers=zink \
+            -Dshared-glapi=false
+          ninja -C "build-android-${{matrix.arch}}" install
+          # cp "build-android-${{matrix.arch}}/src/gallium/drivers/mesa/libzinkk.a" /tmp/mesa/lib/
+          rm /tmp/mesa/lib/libOSMesa.so /tmp/mesa/lib/libOSMesa.so.8
+          mv /tmp/mesa/lib/libOSMesa.so.8.0.0 /tmp/mesa/lib/libOSMesa.so.8
+          mv /tmp/mesa/lib/libOSMesa.so.8 /tmp/mesa/lib/libOSMesa_unstripped.so.8
+          # $ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/${ANDROID_TARGET}-strip /tmp/mesa/lib/libOSMesa.so.8
+          # mv /tmp/mesa/lib/libOSMesa.so.8 /tmp/mesa/lib/libOSMesa_8.so
+      - name: Upload libraries
+        uses: actions/upload-artifact@v2
+        with:
+          name: libmesa_${{matrix.arch}}
+          path: /tmp/mesa
diff --git a/.github/workflows/ios.yml b/.github/workflows/ios.yml
new file mode 100644
index 0000000..67efc35
--- /dev/null
+++ b/.github/workflows/ios.yml
@@ -0,0 +1,48 @@
+
+name: Build iOS
+
+on:
+  [push, pull_request]
+
+jobs:
+  build:
+    runs-on: macos-latest
+
+    steps:
+      - uses: actions/checkout@v2
+
+      - name: Build iOS
+        run: |
+          git clone --depth 1 https://github.com/KhronosGroup/MoltenVK
+          ln -s vulkan_ios.pc vulkan.pc
+          brew install meson pkg-config
+          # sudo apt install -y meson libxrandr-dev libxxf86vm-dev libxshmfence-dev libxcb-*-dev libx11-xcb-dev libxfixes-dev libdrm-dev libx11-dev
+          # cp -R /usr/include/X11 include/
+          # cp -R /usr/include/xcb include/
+          # cp -R /usr/include/GL/* include/GL/
+          pip3 install mako
+          # -Dglx=gallium-xlib \
+          # -Dglx=dri
+          meson build-ios-aarch64 \
+            --prefix="/tmp/zink" \
+            --cross-file ios-aarch64 \
+            -Dmoltenvk-dir=../../../../MoltenVK/MoltenVK \
+            -Db_lundef=false \
+            -Dllvm=disabled \
+            -Dxlib-lease=disabled \
+            -Degl=disabled \
+            -Dgbm=disabled \
+            -Dglx=dri \
+            -Dglx-direct=true \
+            -Dopengl=true \
+            -Dosmesa=true \
+            -Dvulkan-drivers= \
+            -Dgallium-drivers=zink
+          ninja -C build-ios-aarch64 install
+          # cp build-ios-aarch64/src/gallium/drivers/zink/libzink.a /tmp/zink/lib/
+          install_name_tool -change /tmp/zink/lib/libglapi.0.dylib @executable_path/Frameworks/libglapi.0.dylib.framework/libglapi.0.dylib -add_rpath @executable_path/Frameworks/libMoltenVK.dylib.framework /tmp/zink/lib/libOSMesa.8.dylib
+      - name: Upload libraries
+        uses: actions/upload-artifact@v2
+        with:
+          name: libzink
+          path: /tmp/zink
diff --git a/android-cross-file-gen.sh b/android-cross-file-gen.sh
new file mode 100644
index 0000000..13dbd7c
--- /dev/null
+++ b/android-cross-file-gen.sh
@@ -0,0 +1,4 @@
+#!/bin/bash
+set -e
+
+envsubst < android-cross-file.tmp > /tmp/generated-cross-file
diff --git a/android-cross-file.tmp b/android-cross-file.tmp
new file mode 100644
index 0000000..848f6dd
--- /dev/null
+++ b/android-cross-file.tmp
@@ -0,0 +1,22 @@
+[binaries]
+ar = '$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar'
+c = ['ccache', '$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/${ANDROID_TARGET}26-clang', '-O3', '-DVK_USE_PLATFORM_ANDROID_KHR', '-fPIC']
+cpp = ['ccache', '$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/${ANDROID_TARGET}26-clang++', '-O3', '-DVK_USE_PLATFORM_ANDROID_KHR', '-fPIC', '-fno-exceptions', '-fno-unwind-tables', '-fno-asynchronous-unwind-tables', '-static-libstdc++']
+c_ld = 'lld'
+cpp_ld = 'lld'
+strip = '$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/${ANDROID_TARGET}26-strip'
+# Android doesn't come with a pkg-config, but we need one for meson to be happy not
+# finding all the optional deps it looks for.  Use system pkg-config pointing at a
+# directory we get to populate with any .pc files we want to add for Android
+pkgconfig = ['env', 'PKG_CONFIG_LIBDIR=.', '/usr/bin/pkg-config']
+
+[host_machine]
+system = 'linux'
+# cpu_family = 'x86_64'
+# cpu = 'amd64'
+
+# ik this is wrong but workaround sanity check
+cpu_family = 'arm'
+cpu = 'armv8'
+
+endian = 'little'
diff --git a/ext/libMoltenVK.tbd b/ext/libMoltenVK.tbd
new file mode 100644
index 0000000..cb9056d
--- /dev/null
+++ b/ext/libMoltenVK.tbd
@@ -0,0 +1,179 @@
+--- !tapi-tbd
+tbd-version:     4
+targets:         [ arm64-ios ]
+uuids:
+  - target:          arm64-ios
+    value:           B6460E6F-C706-348A-95ED-21110EECFEB4
+flags:           [ not_app_extension_safe ]
+install-name:    '@rpath/libMoltenVK.dylib'
+exports:
+  - targets:         [ arm64-ios ]
+    symbols:         [ __ZN3mvk11canReadFileERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,
+                       __ZN3mvk12absolutePathERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,
+                       __ZN3mvk12canWriteFileERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,
+                       __ZN3mvk13pathExtensionERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,
+                       __ZN3mvk14MSLShaderInputC1Ev, __ZN3mvk14MSLShaderInputC2Ev,
+                       __ZN3mvk17pathWithExtensionERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_bS6_,
+                       __ZN3mvk18MSLResourceBindingC1Ev, __ZN3mvk18MSLResourceBindingC2Ev,
+                       __ZN3mvk19SPIRVToMSLConverter7convertERNS_33SPIRVToMSLConversionConfigurationEbbb,
+                       __ZN3mvk19SPIRVToMSLConverter8setSPIRVEPKjm, __ZN3mvk20GLSLToSPIRVConverter7convertE28MVKGLSLConversionShaderStagebb,
+                       __ZN3mvk20GLSLToSPIRVConverter7setGLSLEPKcm, __ZN3mvk20GLSLToSPIRVConverter7setGLSLERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,
+                       __ZN3mvk20GLSLToSPIRVConverter8setGLSLsERKNSt3__16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEE,
+                       __ZN3mvk27SPIRVToMSLConversionOptions15printMSLVersionEjb,
+                       __ZN3mvk27SPIRVToMSLConversionOptionsC1Ev, __ZN3mvk27SPIRVToMSLConversionOptionsC2Ev,
+                       __ZN3mvk33SPIRVToMSLConversionConfiguration29markAllInputsAndResourcesUsedEv,
+                       __ZN3mvk33SPIRVToMSLConversionConfiguration9alignWithERKS0_,
+                       __ZN3mvk8fileNameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb,
+                       __ZN3mvk8readFileERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERNS0_6vectorIcS5_EERS6_,
+                       __ZN3mvk9writeFileERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS0_6vectorIcS5_EERS6_,
+                       __ZNK3mvk14MSLShaderInput7matchesERKS0_, __ZNK3mvk17DescriptorBinding7matchesERKS0_,
+                       __ZNK3mvk18MSLResourceBinding7matchesERKS0_, __ZNK3mvk27SPIRVToMSLConversionOptions7matchesERKS0_,
+                       __ZNK3mvk33SPIRVToMSLConversionConfiguration14isResourceUsedEN3spv14ExecutionModelEjj,
+                       __ZNK3mvk33SPIRVToMSLConversionConfiguration19countShaderInputsAtEj,
+                       __ZNK3mvk33SPIRVToMSLConversionConfiguration25isShaderInputLocationUsedEj,
+                       __ZNK3mvk33SPIRVToMSLConversionConfiguration29stageSupportsVertexAttributesEv,
+                       __ZNK3mvk33SPIRVToMSLConversionConfiguration7matchesERKS0_,
+                       _mvkFormatTypeFromMTLPixelFormat, _mvkFormatTypeFromVkFormat,
+                       _mvkMTLBarrierScopeFromVkAccessFlags, _mvkMTLBlendFactorFromVkBlendFactor,
+                       _mvkMTLBlendOperationFromVkBlendOp, _mvkMTLCPUCacheModeFromVkMemoryPropertyFlags,
+                       _mvkMTLClearColorFromVkClearValue, _mvkMTLClearDepthFromVkClearValue,
+                       _mvkMTLClearStencilFromVkClearValue, _mvkMTLColorWriteMaskFromVkChannelFlags,
+                       _mvkMTLCompareFunctionFromVkCompareOp, _mvkMTLCullModeFromVkCullModeFlags,
+                       _mvkMTLIndexTypeFromVkIndexType, _mvkMTLIndexTypeSizeInBytes,
+                       _mvkMTLLoadActionFromVkAttachmentLoadOp, _mvkMTLMultisampleDepthResolveFilterFromVkResolveModeFlagBits,
+                       _mvkMTLMultisampleStencilResolveFilterFromVkResolveModeFlagBits,
+                       _mvkMTLPixelFormatBlockTexelSize, _mvkMTLPixelFormatBytesPerBlock,
+                       _mvkMTLPixelFormatBytesPerLayer, _mvkMTLPixelFormatBytesPerRow,
+                       _mvkMTLPixelFormatBytesPerTexel, _mvkMTLPixelFormatFromVkFormat,
+                       _mvkMTLPixelFormatIsDepthFormat, _mvkMTLPixelFormatIsPVRTCFormat,
+                       _mvkMTLPixelFormatIsStencilFormat, _mvkMTLPixelFormatIsSupported,
+                       _mvkMTLPixelFormatName, _mvkMTLPrimitiveTopologyClassFromVkPrimitiveTopology,
+                       _mvkMTLPrimitiveTypeFromVkPrimitiveTopology, _mvkMTLRenderStagesFromVkPipelineStageFlags,
+                       _mvkMTLResourceOptions, _mvkMTLSamplerAddressModeFromVkSamplerAddressMode,
+                       _mvkMTLSamplerBorderColorFromVkBorderColor, _mvkMTLSamplerMinMagFilterFromVkFilter,
+                       _mvkMTLSamplerMipFilterFromVkSamplerMipmapMode, _mvkMTLScissorRectFromVkRect2D,
+                       _mvkMTLStencilOperationFromVkStencilOp, _mvkMTLStepFunctionFromVkVertexInputRate,
+                       _mvkMTLStorageModeFromVkMemoryPropertyFlags, _mvkMTLStoreActionFromVkAttachmentStoreOp,
+                       _mvkMTLTessellationPartitionModeFromSpvExecutionMode, _mvkMTLTextureSwizzleChannelsFromVkComponentMapping,
+                       _mvkMTLTextureSwizzleFromVkComponentSwizzle, _mvkMTLTextureTypeFromVkImageType,
+                       _mvkMTLTextureTypeFromVkImageViewType, _mvkMTLTextureUsageFromVkImageUsageFlags,
+                       _mvkMTLTriangleFillModeFromVkPolygonMode, _mvkMTLVertexFormatFromVkFormat,
+                       _mvkMTLVertexStepFunctionFromVkVertexInputRate, _mvkMTLViewportFromVkViewport,
+                       _mvkMTLWindingFromSpvExecutionMode, _mvkMTLWindingFromVkFrontFace,
+                       _mvkMipmapBaseSizeFromLevelSize2D, _mvkMipmapBaseSizeFromLevelSize3D,
+                       _mvkMipmapLevelSizeFromBaseSize2D, _mvkMipmapLevelSizeFromBaseSize3D,
+                       _mvkMipmapLevels, _mvkMipmapLevels2D, _mvkMipmapLevels3D,
+                       _mvkSampleCountFromVkSampleCountFlagBits, _mvkShaderStageFromVkShaderStageFlagBits,
+                       _mvkVkFormatBlockTexelSize, _mvkVkFormatBytesPerBlock, _mvkVkFormatBytesPerLayer,
+                       _mvkVkFormatBytesPerRow, _mvkVkFormatBytesPerTexel, _mvkVkFormatFromMTLPixelFormat,
+                       _mvkVkFormatIsSupported, _mvkVkFormatName, _mvkVkFormatProperties,
+                       _mvkVkImageTypeFromMTLTextureType, _mvkVkImageUsageFlagsFromMTLTextureUsage,
+                       _mvkVkSampleCountFlagBitsFromSampleCount, _mvkVkShaderStageFlagBitsFromMVKShaderStage,
+                       _vkAcquireNextImage2KHR, _vkAcquireNextImageKHR, _vkAllocateCommandBuffers,
+                       _vkAllocateDescriptorSets, _vkAllocateMemory, _vkBeginCommandBuffer,
+                       _vkBindBufferMemory, _vkBindBufferMemory2, _vkBindBufferMemory2KHR,
+                       _vkBindImageMemory, _vkBindImageMemory2, _vkBindImageMemory2KHR,
+                       _vkCmdBeginDebugUtilsLabelEXT, _vkCmdBeginQuery, _vkCmdBeginRenderPass,
+                       _vkCmdBeginRenderPass2, _vkCmdBeginRenderPass2KHR, _vkCmdBindDescriptorSets,
+                       _vkCmdBindIndexBuffer, _vkCmdBindPipeline, _vkCmdBindVertexBuffers,
+                       _vkCmdBlitImage, _vkCmdClearAttachments, _vkCmdClearColorImage,
+                       _vkCmdClearDepthStencilImage, _vkCmdCopyBuffer, _vkCmdCopyBufferToImage,
+                       _vkCmdCopyImage, _vkCmdCopyImageToBuffer, _vkCmdCopyQueryPoolResults,
+                       _vkCmdDebugMarkerBeginEXT, _vkCmdDebugMarkerEndEXT, _vkCmdDebugMarkerInsertEXT,
+                       _vkCmdDispatch, _vkCmdDispatchBase, _vkCmdDispatchBaseKHR,
+                       _vkCmdDispatchIndirect, _vkCmdDraw, _vkCmdDrawIndexed, _vkCmdDrawIndexedIndirect,
+                       _vkCmdDrawIndexedIndirectCount, _vkCmdDrawIndexedIndirectCountAMD,
+                       _vkCmdDrawIndexedIndirectCountKHR, _vkCmdDrawIndirect, _vkCmdDrawIndirectCount,
+                       _vkCmdDrawIndirectCountAMD, _vkCmdDrawIndirectCountKHR, _vkCmdEndDebugUtilsLabelEXT,
+                       _vkCmdEndQuery, _vkCmdEndRenderPass, _vkCmdEndRenderPass2,
+                       _vkCmdEndRenderPass2KHR, _vkCmdExecuteCommands, _vkCmdFillBuffer,
+                       _vkCmdInsertDebugUtilsLabelEXT, _vkCmdNextSubpass, _vkCmdNextSubpass2,
+                       _vkCmdNextSubpass2KHR, _vkCmdPipelineBarrier, _vkCmdPushConstants,
+                       _vkCmdPushDescriptorSetKHR, _vkCmdPushDescriptorSetWithTemplateKHR,
+                       _vkCmdResetEvent, _vkCmdResetQueryPool, _vkCmdResolveImage,
+                       _vkCmdSetBlendConstants, _vkCmdSetDepthBias, _vkCmdSetDepthBounds,
+                       _vkCmdSetDeviceMask, _vkCmdSetDeviceMaskKHR, _vkCmdSetEvent,
+                       _vkCmdSetLineWidth, _vkCmdSetScissor, _vkCmdSetStencilCompareMask,
+                       _vkCmdSetStencilReference, _vkCmdSetStencilWriteMask, _vkCmdSetViewport,
+                       _vkCmdUpdateBuffer, _vkCmdWaitEvents, _vkCmdWriteTimestamp,
+                       _vkCreateBuffer, _vkCreateBufferView, _vkCreateCommandPool,
+                       _vkCreateComputePipelines, _vkCreateDebugReportCallbackEXT,
+                       _vkCreateDebugUtilsMessengerEXT, _vkCreateDescriptorPool,
+                       _vkCreateDescriptorSetLayout, _vkCreateDescriptorUpdateTemplate,
+                       _vkCreateDescriptorUpdateTemplateKHR, _vkCreateDevice, _vkCreateEvent,
+                       _vkCreateFence, _vkCreateFramebuffer, _vkCreateGraphicsPipelines,
+                       _vkCreateIOSSurfaceMVK, _vkCreateImage, _vkCreateImageView,
+                       _vkCreateInstance, _vkCreateMetalSurfaceEXT, _vkCreatePipelineCache,
+                       _vkCreatePipelineLayout, _vkCreatePrivateDataSlotEXT, _vkCreateQueryPool,
+                       _vkCreateRenderPass, _vkCreateRenderPass2, _vkCreateRenderPass2KHR,
+                       _vkCreateSampler, _vkCreateSamplerYcbcrConversion, _vkCreateSamplerYcbcrConversionKHR,
+                       _vkCreateSemaphore, _vkCreateShaderModule, _vkCreateSwapchainKHR,
+                       _vkDebugMarkerSetObjectNameEXT, _vkDebugMarkerSetObjectTagEXT,
+                       _vkDebugReportMessageEXT, _vkDestroyBuffer, _vkDestroyBufferView,
+                       _vkDestroyCommandPool, _vkDestroyDebugReportCallbackEXT, _vkDestroyDebugUtilsMessengerEXT,
+                       _vkDestroyDescriptorPool, _vkDestroyDescriptorSetLayout, _vkDestroyDescriptorUpdateTemplate,
+                       _vkDestroyDescriptorUpdateTemplateKHR, _vkDestroyDevice, _vkDestroyEvent,
+                       _vkDestroyFence, _vkDestroyFramebuffer, _vkDestroyImage, _vkDestroyImageView,
+                       _vkDestroyInstance, _vkDestroyPipeline, _vkDestroyPipelineCache,
+                       _vkDestroyPipelineLayout, _vkDestroyPrivateDataSlotEXT, _vkDestroyQueryPool,
+                       _vkDestroyRenderPass, _vkDestroySampler, _vkDestroySamplerYcbcrConversion,
+                       _vkDestroySamplerYcbcrConversionKHR, _vkDestroySemaphore,
+                       _vkDestroyShaderModule, _vkDestroySurfaceKHR, _vkDestroySwapchainKHR,
+                       _vkDeviceWaitIdle, _vkEndCommandBuffer, _vkEnumerateDeviceExtensionProperties,
+                       _vkEnumerateDeviceLayerProperties, _vkEnumerateInstanceExtensionProperties,
+                       _vkEnumerateInstanceLayerProperties, _vkEnumerateInstanceVersion,
+                       _vkEnumeratePhysicalDeviceGroups, _vkEnumeratePhysicalDeviceGroupsKHR,
+                       _vkEnumeratePhysicalDevices, _vkExportMetalObjectsEXT, _vkFlushMappedMemoryRanges,
+                       _vkFreeCommandBuffers, _vkFreeDescriptorSets, _vkFreeMemory,
+                       _vkGetBufferDeviceAddress, _vkGetBufferDeviceAddressEXT, _vkGetBufferDeviceAddressKHR,
+                       _vkGetBufferMemoryRequirements, _vkGetBufferMemoryRequirements2,
+                       _vkGetBufferMemoryRequirements2KHR, _vkGetBufferOpaqueCaptureAddress,
+                       _vkGetBufferOpaqueCaptureAddressKHR, _vkGetDescriptorSetLayoutSupport,
+                       _vkGetDescriptorSetLayoutSupportKHR, _vkGetDeviceGroupPeerMemoryFeatures,
+                       _vkGetDeviceGroupPeerMemoryFeaturesKHR, _vkGetDeviceGroupPresentCapabilitiesKHR,
+                       _vkGetDeviceGroupSurfacePresentModesKHR, _vkGetDeviceMemoryCommitment,
+                       _vkGetDeviceMemoryOpaqueCaptureAddress, _vkGetDeviceMemoryOpaqueCaptureAddressKHR,
+                       _vkGetDeviceProcAddr, _vkGetDeviceQueue, _vkGetDeviceQueue2,
+                       _vkGetEventStatus, _vkGetFenceStatus, _vkGetIOSurfaceMVK,
+                       _vkGetImageMemoryRequirements, _vkGetImageMemoryRequirements2,
+                       _vkGetImageMemoryRequirements2KHR, _vkGetImageSparseMemoryRequirements,
+                       _vkGetImageSparseMemoryRequirements2, _vkGetImageSparseMemoryRequirements2KHR,
+                       _vkGetImageSubresourceLayout, _vkGetInstanceProcAddr, _vkGetMTLBufferMVK,
+                       _vkGetMTLCommandQueueMVK, _vkGetMTLDeviceMVK, _vkGetMTLTextureMVK,
+                       _vkGetMoltenVKConfigurationMVK, _vkGetPastPresentationTimingGOOGLE,
+                       _vkGetPerformanceStatisticsMVK, _vkGetPhysicalDeviceExternalBufferProperties,
+                       _vkGetPhysicalDeviceExternalBufferPropertiesKHR, _vkGetPhysicalDeviceExternalFenceProperties,
+                       _vkGetPhysicalDeviceExternalFencePropertiesKHR, _vkGetPhysicalDeviceExternalSemaphoreProperties,
+                       _vkGetPhysicalDeviceExternalSemaphorePropertiesKHR, _vkGetPhysicalDeviceFeatures,
+                       _vkGetPhysicalDeviceFeatures2, _vkGetPhysicalDeviceFeatures2KHR,
+                       _vkGetPhysicalDeviceFormatProperties, _vkGetPhysicalDeviceFormatProperties2,
+                       _vkGetPhysicalDeviceFormatProperties2KHR, _vkGetPhysicalDeviceImageFormatProperties,
+                       _vkGetPhysicalDeviceImageFormatProperties2, _vkGetPhysicalDeviceImageFormatProperties2KHR,
+                       _vkGetPhysicalDeviceMemoryProperties, _vkGetPhysicalDeviceMemoryProperties2,
+                       _vkGetPhysicalDeviceMemoryProperties2KHR, _vkGetPhysicalDeviceMetalFeaturesMVK,
+                       _vkGetPhysicalDevicePresentRectanglesKHR, _vkGetPhysicalDeviceProperties,
+                       _vkGetPhysicalDeviceProperties2, _vkGetPhysicalDeviceProperties2KHR,
+                       _vkGetPhysicalDeviceQueueFamilyProperties, _vkGetPhysicalDeviceQueueFamilyProperties2,
+                       _vkGetPhysicalDeviceQueueFamilyProperties2KHR, _vkGetPhysicalDeviceSparseImageFormatProperties,
+                       _vkGetPhysicalDeviceSparseImageFormatProperties2, _vkGetPhysicalDeviceSparseImageFormatProperties2KHR,
+                       _vkGetPhysicalDeviceSurfaceCapabilities2KHR, _vkGetPhysicalDeviceSurfaceCapabilitiesKHR,
+                       _vkGetPhysicalDeviceSurfaceFormats2KHR, _vkGetPhysicalDeviceSurfaceFormatsKHR,
+                       _vkGetPhysicalDeviceSurfacePresentModesKHR, _vkGetPhysicalDeviceSurfaceSupportKHR,
+                       _vkGetPipelineCacheData, _vkGetPrivateDataEXT, _vkGetQueryPoolResults,
+                       _vkGetRefreshCycleDurationGOOGLE, _vkGetRenderAreaGranularity,
+                       _vkGetSemaphoreCounterValue, _vkGetSemaphoreCounterValueKHR,
+                       _vkGetSwapchainImagesKHR, _vkGetVersionStringsMVK, _vkInvalidateMappedMemoryRanges,
+                       _vkMapMemory, _vkMergePipelineCaches, _vkQueueBeginDebugUtilsLabelEXT,
+                       _vkQueueBindSparse, _vkQueueEndDebugUtilsLabelEXT, _vkQueueInsertDebugUtilsLabelEXT,
+                       _vkQueuePresentKHR, _vkQueueSubmit, _vkQueueWaitIdle, _vkResetCommandBuffer,
+                       _vkResetCommandPool, _vkResetDescriptorPool, _vkResetEvent,
+                       _vkResetFences, _vkResetQueryPool, _vkResetQueryPoolEXT, _vkSetDebugUtilsObjectNameEXT,
+                       _vkSetDebugUtilsObjectTagEXT, _vkSetEvent, _vkSetHdrMetadataEXT,
+                       _vkSetMTLTextureMVK, _vkSetMoltenVKConfigurationMVK, _vkSetPrivateDataEXT,
+                       _vkSetWorkgroupSizeMVK, _vkSignalSemaphore, _vkSignalSemaphoreKHR,
+                       _vkSubmitDebugUtilsMessageEXT, _vkTrimCommandPool, _vkTrimCommandPoolKHR,
+                       _vkUnmapMemory, _vkUpdateDescriptorSetWithTemplate, _vkUpdateDescriptorSetWithTemplateKHR,
+                       _vkUpdateDescriptorSets, _vkUseIOSurfaceMVK, _vkWaitForFences,
+                       _vkWaitSemaphores, _vkWaitSemaphoresKHR, _vk_icdGetInstanceProcAddr,
+                       _vk_icdGetPhysicalDeviceProcAddr, _vk_icdNegotiateLoaderICDInterfaceVersion ]
+...
diff --git a/include/GL/osmesa.h b/include/GL/osmesa.h
index 39cd54e..866d5a4 100644
--- a/include/GL/osmesa.h
+++ b/include/GL/osmesa.h
@@ -324,6 +324,14 @@ OSMesaPostprocess(OSMesaContext osmesa, const char *filter,
                   unsigned enable_value);
 
 
+
+/**
+ * Flush the front buffer.
+ */
+GLAPI void GLAPIENTRY
+OSMesaFlushFrontbuffer(void);
+
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/ios-aarch64 b/ios-aarch64
new file mode 100644
index 0000000..e2f88e4
--- /dev/null
+++ b/ios-aarch64
@@ -0,0 +1,19 @@
+[binaries]
+
+ar = 'ar'
+c = ['ccache', 'clang', '-O3', '-DVK_USE_PLATFORM_IOS_MVK', '-DVK_USE_PLATFORM_METAL_EXT', '-DVK_ENABLE_BETA_EXTENSIONS', '-arch', 'arm64', '-isysroot', '/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk', '-miphoneos-version-min=12.0', '-fPIC']
+cpp = ['ccache', 'clang++', '-O3', '-DVK_USE_PLATFORM_IOS_MVK', '-DVK_USE_PLATFORM_METAL_EXT', '-DVK_ENABLE_BETA_EXTENSIONS', '-arch', 'arm64', '-isysroot', '/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk', '-miphoneos-version-min=12.0', '-fPIC', '-fno-exceptions', '-fno-unwind-tables', '-fno-asynchronous-unwind-tables', '-static-libstdc++']
+c_ld = 'ld'
+cpp_ld = 'ld'
+strip = 'strip'
+# Android doesn't come with a pkg-config, but we need one for meson to be happy not
+# finding all the optional deps it looks for.  Use system pkg-config pointing at a
+# directory we get to populate with any .pc files we want to add for Android
+pkgconfig = 'pkg-config'
+
+[host_machine]
+# or linux?
+system = 'darwin'
+cpu_family = 'arm'
+cpu = 'armv8'
+endian = 'little'
diff --git a/log.pc b/log.pc
new file mode 100644
index 0000000..235f45c
--- /dev/null
+++ b/log.pc
@@ -0,0 +1,4 @@
+Name: log
+Description: Android liblog library
+Version: 1.0
+Libs: -llog
diff --git a/meson.build b/meson.build
index 305b34d..f37e471 100644
--- a/meson.build
+++ b/meson.build
@@ -339,7 +339,7 @@ with_clc = with_microsoft_clc or with_intel_clc or with_gallium_asahi
 with_spirv_to_dxil = get_option('spirv-to-dxil')

 if host_machine.system() == 'darwin'
-  with_dri_platform = 'apple'
+  with_dri_platform = 'none'
   pre_args += '-DBUILDING_MESA'
 elif ['windows', 'cygwin'].contains(host_machine.system())
   with_dri_platform = 'windows'
@@ -527,7 +527,7 @@ endif

 if with_glx != 'disabled'
   if not (with_platform_x11 and with_any_opengl)
-    error('Cannot build GLX support without X11 platform support and at least one OpenGL API')
+    warning('Cannot build GLX support without X11 platform support and at least one OpenGL API')
   elif with_glx == 'xlib'
     if not with_gallium
       error('xlib based GLX requires at least one gallium driver')
@@ -1686,7 +1686,7 @@ if system_has_kms_drm
   dep_libdrm = dependency(
     'libdrm', version : '>=' + _drm_ver,
     # GNU/Hurd includes egl_dri2, without drm.
-    required : (with_dri2 and host_machine.system() != 'gnu') or with_dri3
+    required : not with_platform_android and ((with_dri2 and host_machine.system() != 'gnu') or with_dri3)
   )
 else
   # We should prevent libdrm from being available when the target doesn't have it to avoid transitive
@@ -1994,7 +1994,7 @@ endif

 if with_osmesa
   if not with_gallium_softpipe
-    error('OSMesa gallium requires gallium softpipe or llvmpipe.')
+    warning('OSMesa gallium requires gallium softpipe or llvmpipe.')
   endif
   if host_machine.system() == 'windows'
     osmesa_lib_name = 'osmesa'
@@ -2067,7 +2067,7 @@ endif

 with_dri3_modifiers = false
 with_xcb_keysyms = false
-if with_platform_x11
+if with_platform_x11 and host_machine.system() != 'darwin'
   if with_glx == 'xlib'
     dep_x11 = dependency('x11')
     dep_xext = dependency('xext')

diff --git a/nativewindow.pc b/nativewindow.pc
new file mode 100644
index 0000000..cfe23c0
--- /dev/null
+++ b/nativewindow.pc
@@ -0,0 +1,4 @@
+Name: nativewindow
+Description: Android libnativewindow library
+Version: 1.0
+Libs:
diff --git a/src/android_stub/meson.build b/src/android_stub/meson.build
index 6097ae8..2c321c7 100644
--- a/src/android_stub/meson.build
+++ b/src/android_stub/meson.build
@@ -17,5 +17,10 @@ if with_android_stub
 
   dep_android = declare_dependency(
     link_with : stub_libs,
+    dependencies : [
+      dependency('log'),
+      dependency('sync'),
+      dependency('nativewindow'),
+    ]
   )
 endif
diff --git a/src/gallium/auxiliary/target-helpers/inline_sw_helper.h b/src/gallium/auxiliary/target-helpers/inline_sw_helper.h
index d821008..457b2d8 100644
--- a/src/gallium/auxiliary/target-helpers/inline_sw_helper.h
+++ b/src/gallium/auxiliary/target-helpers/inline_sw_helper.h
@@ -29,6 +29,10 @@
 #include "d3d12/d3d12_public.h"
 #endif

+#ifdef GALLIUM_ZINK
+#include "zink/zink_public.h"
+#endif
+
 static inline struct pipe_screen *
 sw_screen_create_named(struct sw_winsys *winsys, const char *driver)
 {
@@ -80,6 +84,9 @@ sw_screen_create_vk(struct sw_winsys *winsys, bool sw_vk)
 #endif
 #if defined(GALLIUM_SOFTPIPE)
       (sw_vk ? "" : "softpipe"),
+#endif
+#if defined(GALLIUM_ZINK)
+      (sw_vk || only_sw) ? "" : "zink",
 #endif
    };
 
diff --git a/src/gallium/drivers/zink/zink_instance.py b/src/gallium/drivers/zink/zink_instance.py
index c3bd231..e3ea170 100644
--- a/src/gallium/drivers/zink/zink_instance.py
+++ b/src/gallium/drivers/zink/zink_instance.py
@@ -43,6 +43,8 @@ EXTENSIONS = [
     Extension("VK_MVK_moltenvk",
         nonstandard=True),
     Extension("VK_KHR_surface"),
+    Extension("VK_KHR_android_surface"),
+    Extension("VK_EXT_metal_surface"),
     Extension("VK_EXT_headless_surface"),
     Extension("VK_KHR_wayland_surface"),
     Extension("VK_KHR_xcb_surface",
diff --git a/src/gallium/drivers/zink/zink_kopper.c b/src/gallium/drivers/zink/zink_kopper.c
index 09ca173..850ebe5 100644
--- a/src/gallium/drivers/zink/zink_kopper.c
+++ b/src/gallium/drivers/zink/zink_kopper.c
@@ -56,6 +56,16 @@ init_dt_type(struct kopper_displaytarget *cdt)
 {
    VkStructureType type = cdt->info.bos.sType;
    switch (type) {
+#ifdef VK_USE_PLATFORM_ANDROID_KHR
+    case VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR:
+       cdt->type = KOPPER_ANDROID;
+       break;
+#endif
+#ifdef VK_USE_PLATFORM_METAL_EXT
+    case VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT:
+       cdt->type = KOPPER_METAL;
+       break;
+#endif
 #ifdef VK_USE_PLATFORM_XCB_KHR
    case VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR:
       cdt->type = KOPPER_X11;
@@ -85,6 +95,16 @@ kopper_CreateSurface(struct zink_screen *screen, struct kopper_displaytarget *cd
    init_dt_type(cdt);
    VkStructureType type = cdt->info.bos.sType;
    switch (type) {
+#ifdef VK_USE_PLATFORM_ANDROID_KHR
+    case VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR:
+       error = VKSCR(CreateAndroidSurfaceKHR)(screen->instance, (VkAndroidSurfaceCreateInfoKHR *)&cdt->info.bos, NULL, &surface);
+       break;
+#endif
+#ifdef VK_USE_PLATFORM_METAL_EXT
+    case VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT:
+       error = VKSCR(CreateMetalSurfaceEXT)(screen->instance, (VkMetalSurfaceCreateInfoEXT *)&cdt->info.bos, NULL, &surface);
+       break;
+#endif
 #ifdef VK_USE_PLATFORM_XCB_KHR
    case VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR: {
 #ifdef GLX_USE_APPLE
@@ -132,7 +152,7 @@ kopper_CreateSurface(struct zink_screen *screen, struct kopper_displaytarget *cd
       /* VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR and VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR
       * are not handled
       */
-      assert(modes[i] <= VK_PRESENT_MODE_FIFO_RELAXED_KHR);
+      //assert(modes[i] <= VK_PRESENT_MODE_FIFO_RELAXED_KHR);
       if (modes[i] <= VK_PRESENT_MODE_FIFO_RELAXED_KHR)
          cdt->present_modes |= BITFIELD_BIT(modes[i]);
    }
@@ -200,6 +220,18 @@ find_dt_entry(struct zink_screen *screen, const struct kopper_displaytarget *cdt
 {
    struct hash_entry *he = NULL;
    switch (cdt->type) {
+#ifdef VK_USE_PLATFORM_ANDROID_KHR
+   case KOPPER_ANDROID:
+      VkAndroidSurfaceCreateInfoKHR *android = (VkAndroidSurfaceCreateInfoKHR*)&cdt->info.bos;
+      he = _mesa_hash_table_search(&screen->dts, android->window);
+      break;
+#endif
+#ifdef VK_USE_PLATFORM_METAL_EXT
+   case KOPPER_METAL:
+      VkMetalSurfaceCreateInfoEXT *metal = (VkMetalSurfaceCreateInfoEXT*)&cdt->info.bos;
+      he = _mesa_hash_table_search(&screen->dts, metal->pLayer);
+      break;
+#endif
 #ifdef VK_USE_PLATFORM_XCB_KHR
    case KOPPER_X11: {
       VkXcbSurfaceCreateInfoKHR *xcb = (VkXcbSurfaceCreateInfoKHR *)&cdt->info.bos;
@@ -304,6 +336,8 @@ kopper_CreateSwapchain(struct zink_screen *screen, struct kopper_displaytarget *
       cswap->scci.imageExtent.width = cdt->caps.currentExtent.width;
       cswap->scci.imageExtent.height = cdt->caps.currentExtent.height;
       break;
+   case KOPPER_ANDROID:
+   case KOPPER_METAL:
    case KOPPER_WAYLAND:
       /* On Wayland, currentExtent is the special value (0xFFFFFFFF, 0xFFFFFFFF), indicating that the
        * surface size will be determined by the extent of a swapchain targeting the surface. Whatever the
@@ -413,6 +447,8 @@ zink_kopper_displaytarget_create(struct zink_screen *screen, unsigned tex_usage,
          case KOPPER_X11:
             _mesa_hash_table_init(&screen->dts, screen, NULL, _mesa_key_pointer_equal);
             break;
+         case KOPPER_ANDROID:
+         case KOPPER_METAL:
          case KOPPER_WAYLAND:
          case KOPPER_WIN32:
             _mesa_hash_table_init(&screen->dts, screen, _mesa_hash_pointer, _mesa_key_pointer_equal);
@@ -466,6 +502,18 @@ zink_kopper_displaytarget_create(struct zink_screen *screen, unsigned tex_usage,

    simple_mtx_lock(&screen->dt_lock);
    switch (cdt->type) {
+#ifdef VK_USE_PLATFORM_ANDROID_KHR
+   case KOPPER_ANDROID:
+      VkAndroidSurfaceCreateInfoKHR *android = (VkAndroidSurfaceCreateInfoKHR*)&cdt->info.bos;
+      _mesa_hash_table_insert(&screen->dts, android->window, cdt);
+      break;
+#endif
+#ifdef VK_USE_PLATFORM_METAL_EXT
+   case KOPPER_METAL:
+      VkMetalSurfaceCreateInfoEXT *metal = (VkMetalSurfaceCreateInfoEXT*)&cdt->info.bos;
+      _mesa_hash_table_insert(&screen->dts, metal->pLayer, cdt);
+      break;
+#endif
 #ifdef VK_USE_PLATFORM_XCB_KHR
    case KOPPER_X11: {
       VkXcbSurfaceCreateInfoKHR *xcb = (VkXcbSurfaceCreateInfoKHR *)&cdt->info.bos;
diff --git a/src/gallium/drivers/zink/zink_kopper.h b/src/gallium/drivers/zink/zink_kopper.h
index 857a9cd..c336da3 100644
--- a/src/gallium/drivers/zink/zink_kopper.h
+++ b/src/gallium/drivers/zink/zink_kopper.h
@@ -60,6 +60,8 @@ struct kopper_swapchain {
 };
 
 enum kopper_type {
+   KOPPER_ANDROID,
+   KOPPER_METAL,
    KOPPER_X11,
    KOPPER_WAYLAND,
    KOPPER_WIN32
diff --git a/src/gallium/drivers/zink/zink_screen.c b/src/gallium/drivers/zink/zink_screen.c
index 8825f07..37f2662 100644
--- a/src/gallium/drivers/zink/zink_screen.c
+++ b/src/gallium/drivers/zink/zink_screen.c
@@ -2814,7 +2814,11 @@ zink_internal_create_screen(const struct pipe_screen_config *config)
    if (screen->info.have_EXT_calibrated_timestamps && !check_have_device_time(screen))
       goto fail;
 
-   screen->have_triangle_fans = true;
+   #ifndef __APPLE__
+    screen->have_triangle_fans = true;
+   #else
+    screen->have_triangle_fans = false;
+   #endif
 #if defined(VK_KHR_PORTABILITY_SUBSET_EXTENSION_NAME)
    if (screen->info.have_KHR_portability_subset) {
       screen->have_triangle_fans = (VK_TRUE == screen->info.portability_subset_feats.triangleFans);
diff --git a/src/gallium/frontends/dri/empty.c b/src/gallium/frontends/dri/empty.c
new file mode 100644
index 0000000..e69de29
diff --git a/src/gallium/frontends/dri/meson.build b/src/gallium/frontends/dri/meson.build
index 6009322..87b9e6c 100644
--- a/src/gallium/frontends/dri/meson.build
+++ b/src/gallium/frontends/dri/meson.build
@@ -65,7 +65,7 @@ endif
 
 libdri = static_library(
   'dri',
-  [ files_libdri, sha1_h ],
+  with_platform_android or host_machine.system() == 'darwin' ? ['empty.c'] : [ files_libdri, sha1_h ],
   include_directories : [
     inc_include, inc_util, inc_mesa, inc_mapi, inc_src, inc_gallium,
     inc_gallium_aux, inc_util,  inc_gallium_drivers,
diff --git a/src/gallium/frontends/osmesa/meson.build b/src/gallium/frontends/osmesa/meson.build
index 721ecd6..1cb2a21 100644
--- a/src/gallium/frontends/osmesa/meson.build
+++ b/src/gallium/frontends/osmesa/meson.build
@@ -27,10 +27,10 @@ endif
 
 libosmesa_st = static_library(
   'osmesa_st',
-  'osmesa.c',
+  'osmesa_bufferless.c',
   c_args : osmesa_st_c_args,
   include_directories : [
-    inc_include, inc_src, inc_gallium, inc_gallium_aux, inc_mapi, inc_mesa,
+    inc_include, inc_src, inc_gallium, inc_gallium_aux, inc_gallium_drivers, inc_mapi, inc_mesa,
   ],
   dependencies : [idep_mesautil],
 )
diff --git a/src/gallium/targets/osmesa/meson.build b/src/gallium/targets/osmesa/meson.build
index d16e785..45df4b5 100644
--- a/src/gallium/targets/osmesa/meson.build
+++ b/src/gallium/targets/osmesa/meson.build
@@ -19,9 +19,13 @@
 # SOFTWARE.
 
 osmesa_link_with = []
-osmesa_link_args = []
+osmesa_link_args = ['-lvulkan']
 osmesa_link_deps = []
 
+if host_machine.system() == 'darwin'
+  osmesa_link_args = []
+endif
+
 if with_shared_glapi
   osmesa_link_with += libglapi
 endif
@@ -55,7 +59,8 @@ libosmesa = shared_library(
     libmesa, libgallium, libws_null, osmesa_link_with,
   ],
   dependencies : [
-    dep_ws2_32, dep_selinux, dep_thread, dep_clock, dep_unwind, driver_swrast
+    dep_ws2_32, dep_selinux, dep_thread, dep_clock, dep_unwind, driver_swrast, driver_zink,
+    idep_xmlconfig
   ],
   name_prefix : host_machine.system() == 'windows' ? '' : [],  # otherwise mingw will create libosmesa.dll
   soversion : host_machine.system() == 'windows' ? '' : '8',
diff --git a/src/gallium/targets/osmesa/osmesa.sym b/src/gallium/targets/osmesa/osmesa.sym
index f788e5a..9f6e8a5 100644
--- a/src/gallium/targets/osmesa/osmesa.sym
+++ b/src/gallium/targets/osmesa/osmesa.sym
@@ -13,6 +13,7 @@
 		OSMesaMakeCurrent;
 		OSMesaPixelStore;
 		OSMesaPostprocess;
+                OSMesaFlushFrontbuffer;
 		gl*;
 	local:
 		*;
diff --git a/src/gallium/winsys/sw/dri/dri_sw_winsys.c b/src/gallium/winsys/sw/dri/dri_sw_winsys.c
index 35a267f..b66b01d 100644
--- a/src/gallium/winsys/sw/dri/dri_sw_winsys.c
+++ b/src/gallium/winsys/sw/dri/dri_sw_winsys.c
@@ -26,6 +26,10 @@
  *
  **************************************************************************/
 
+#ifdef ANDROID
+#undef HAVE_SYS_SHM_H
+#endif
+
 #ifdef HAVE_SYS_SHM_H
 #include <sys/ipc.h>
 #include <sys/shm.h>
diff --git a/src/gallium/winsys/virgl/drm/meson.build b/src/gallium/winsys/virgl/drm/meson.build
index 79bac2f..9f427be 100644
--- a/src/gallium/winsys/virgl/drm/meson.build
+++ b/src/gallium/winsys/virgl/drm/meson.build
@@ -18,9 +18,10 @@
 # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 # SOFTWARE.
 
+#  'virgl_drm_winsys.c',
+
 libvirgldrm = static_library(
   'virgldrm',
-  'virgl_drm_winsys.c',
   include_directories : [inc_include, inc_src, inc_mapi, inc_mesa, inc_gallium, inc_gallium_aux, inc_gallium_drivers, inc_virtio],
   dependencies : [dep_libdrm, dep_libvirglcommon, idep_mesautil, idep_nir_headers],
   gnu_symbol_visibility : 'hidden',
diff --git a/src/glx/empty.c b/src/glx/empty.c
new file mode 100644
index 0000000..e69de29
diff --git a/src/glx/meson.build b/src/glx/meson.build
index 20f0474..1221a02 100644
--- a/src/glx/meson.build
+++ b/src/glx/meson.build
@@ -73,6 +73,10 @@ files_libglx = files(
   'xfont.c',
 )

+if with_platform_android or host_machine.system() == 'darwin'
+dep_xdamage = null_dep
+endif
+
 extra_libs_libglx = []
 extra_deps_libgl = []
 extra_ld_args_libgl = []
@@ -124,7 +128,7 @@ endif

 libglx = static_library(
   'glx',
-  [files_libglx, glx_generated],
+  not with_platform_android and host_machine.system() != 'darwin' ? [files_libglx, glx_generated] : ['empty.c'],
   include_directories : [inc_include, inc_src, inc_glapi, inc_loader],
   c_args : [
     '-DGL_LIB_NAME="lib@0@.so.@1@"'.format(gl_lib_name, gl_lib_version.split('.')[0]),
diff --git a/sync.pc b/sync.pc
new file mode 100644
index 0000000..521c3a8
--- /dev/null
+++ b/sync.pc
@@ -0,0 +1,4 @@
+Name: sync
+Description: Android libsync library
+Version: 1.0
+Libs:
diff --git a/vulkan_android.pc b/vulkan_android.pc
new file mode 100644
index 0000000..e112758
--- /dev/null
+++ b/vulkan_android.pc
@@ -0,0 +1,4 @@
+Name: vulkan
+Description: Android Vulkan library
+Version: 1.2
+Libs: -lvulkan
diff --git a/vulkan_ios.pc b/vulkan_ios.pc
new file mode 100644
index 0000000..4e8474a
--- /dev/null
+++ b/vulkan_ios.pc
@@ -0,0 +1,4 @@
+Name: vulkan
+Description: MoltenVK library
+Version: 1.2
+Libs: -L../ext -lMoltenVK
